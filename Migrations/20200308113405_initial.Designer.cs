// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectApi.Data;

namespace ProjectApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200308113405_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ProjectApi.Models.AccessLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AccessLevels");
                });

            modelBuilder.Entity("ProjectApi.Models.Commodity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Commodities");
                });

            modelBuilder.Entity("ProjectApi.Models.EOP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Brand");

                    b.Property<int>("CommodityId");

                    b.Property<string>("ComponentName");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("EOPTypeId");

                    b.Property<int>("EOPUnitId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("Qty");

                    b.Property<int>("RatePerUnit");

                    b.HasKey("Id");

                    b.HasIndex("CommodityId");

                    b.HasIndex("EOPTypeId");

                    b.HasIndex("EOPUnitId");

                    b.ToTable("EOPs");
                });

            modelBuilder.Entity("ProjectApi.Models.EOPType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("EOPTypes");
                });

            modelBuilder.Entity("ProjectApi.Models.EOPUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("EOPUnits");
                });

            modelBuilder.Entity("ProjectApi.Models.FarmOwnershipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FarmOwnershipTypes");
                });

            modelBuilder.Entity("ProjectApi.Models.Farmer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("AgentPhoneNumber");

                    b.Property<string>("AlternativeOccupation");

                    b.Property<string>("BVN");

                    b.Property<int>("CommodityId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CurrentIncome");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<int>("DisbursmentStatus");

                    b.Property<DateTime>("ExpiryDate");

                    b.Property<string>("FaceImageUrl");

                    b.Property<string>("FarmFarmerImage");

                    b.Property<string>("FarmImageUrl");

                    b.Property<string>("FarmLocation");

                    b.Property<int>("FarmOwnershiptypeId");

                    b.Property<DateTime>("FarmVaricationDate");

                    b.Property<string>("FingerPrint");

                    b.Property<string>("FirstName");

                    b.Property<string>("GPSCenterPoint");

                    b.Property<string>("GPSCenterPoint_precision");

                    b.Property<string>("GPS_altitude");

                    b.Property<string>("GPSlatitude");

                    b.Property<string>("GPSlongitude");

                    b.Property<string>("GuarantorAddress");

                    b.Property<string>("GuarantorEmail");

                    b.Property<string>("GuarantorName");

                    b.Property<string>("GuarantorPhone");

                    b.Property<int>("HectreSize");

                    b.Property<string>("IDNumber");

                    b.Property<string>("IDUrl");

                    b.Property<int>("IDtypeId");

                    b.Property<DateTime>("IssueDate");

                    b.Property<int>("LgaoforiginId");

                    b.Property<int>("LgaofresidenceId");

                    b.Property<int>("MappingStatus");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("NextofKinAddress");

                    b.Property<string>("NextofKinName");

                    b.Property<string>("NextofKinPhone");

                    b.Property<int>("NoOfDependants");

                    b.Property<string>("OtherName");

                    b.Property<string>("OtherNationality");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PreviousInterventions");

                    b.Property<int>("SizeOfLand");

                    b.Property<string>("SoilType");

                    b.Property<string>("SurName");

                    b.Property<string>("Topography");

                    b.Property<int>("farmerVarificationStatusId");

                    b.Property<int>("genderId");

                    b.Property<int>("maritalStatusId");

                    b.Property<int>("nationalityId");

                    b.Property<int>("stateoforiginId");

                    b.Property<int>("stateofresidenceId");

                    b.HasKey("Id");

                    b.HasIndex("CommodityId");

                    b.HasIndex("FarmOwnershiptypeId");

                    b.HasIndex("IDtypeId");

                    b.HasIndex("LgaoforiginId");

                    b.HasIndex("LgaofresidenceId");

                    b.HasIndex("farmerVarificationStatusId");

                    b.HasIndex("genderId");

                    b.HasIndex("maritalStatusId");

                    b.HasIndex("nationalityId");

                    b.HasIndex("stateoforiginId");

                    b.HasIndex("stateofresidenceId");

                    b.ToTable("Farmers");
                });

            modelBuilder.Entity("ProjectApi.Models.FarmerVarificationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FarmerVarifcationstatus");
                });

            modelBuilder.Entity("ProjectApi.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("ProjectApi.Models.IDType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("IDTypes");
                });

            modelBuilder.Entity("ProjectApi.Models.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Company");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("DeliveredQuantity");

                    b.Property<int>("EOPId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("TargetQuantity");

                    b.Property<int>("stateId");

                    b.HasKey("Id");

                    b.HasIndex("EOPId");

                    b.HasIndex("stateId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("ProjectApi.Models.Lga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<int>("stateId");

                    b.HasKey("Id");

                    b.HasIndex("stateId");

                    b.ToTable("Lgas");
                });

            modelBuilder.Entity("ProjectApi.Models.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("MaritalStatus");
                });

            modelBuilder.Entity("ProjectApi.Models.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Nationality");
                });

            modelBuilder.Entity("ProjectApi.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("ProjectApi.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("ProjectApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("CommodityId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Designation");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTime>("LastActive");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfileUrl");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("accessLevelId");

                    b.Property<int?>("stateId");

                    b.HasKey("Id");

                    b.HasIndex("CommodityId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("accessLevelId");

                    b.HasIndex("stateId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ProjectApi.Models.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("ProjectApi.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ProjectApi.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ProjectApi.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ProjectApi.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjectApi.Models.EOP", b =>
                {
                    b.HasOne("ProjectApi.Models.Commodity", "Commodity")
                        .WithMany()
                        .HasForeignKey("CommodityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectApi.Models.EOPType", "EOPType")
                        .WithMany()
                        .HasForeignKey("EOPTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectApi.Models.EOPUnit", "EOPUnit")
                        .WithMany()
                        .HasForeignKey("EOPUnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjectApi.Models.Farmer", b =>
                {
                    b.HasOne("ProjectApi.Models.Commodity", "Commodity")
                        .WithMany()
                        .HasForeignKey("CommodityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectApi.Models.FarmOwnershipType", "farmOwnershiptype")
                        .WithMany()
                        .HasForeignKey("FarmOwnershiptypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectApi.Models.IDType", "IDtype")
                        .WithMany()
                        .HasForeignKey("IDtypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectApi.Models.Lga", "Lgaoforigin")
                        .WithMany()
                        .HasForeignKey("LgaoforiginId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectApi.Models.Lga", "Lgaofresidence")
                        .WithMany()
                        .HasForeignKey("LgaofresidenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectApi.Models.FarmerVarificationStatus", "farmerVarificationStatus")
                        .WithMany()
                        .HasForeignKey("farmerVarificationStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectApi.Models.Gender", "gender")
                        .WithMany()
                        .HasForeignKey("genderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectApi.Models.MaritalStatus", "maritalStatus")
                        .WithMany()
                        .HasForeignKey("maritalStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectApi.Models.Nationality", "nationality")
                        .WithMany()
                        .HasForeignKey("nationalityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectApi.Models.State", "stateoforigin")
                        .WithMany()
                        .HasForeignKey("stateoforiginId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectApi.Models.State", "stateofresidence")
                        .WithMany()
                        .HasForeignKey("stateofresidenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjectApi.Models.Inventory", b =>
                {
                    b.HasOne("ProjectApi.Models.EOP", "EOP")
                        .WithMany()
                        .HasForeignKey("EOPId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectApi.Models.State", "state")
                        .WithMany()
                        .HasForeignKey("stateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjectApi.Models.Lga", b =>
                {
                    b.HasOne("ProjectApi.Models.State", "state")
                        .WithMany()
                        .HasForeignKey("stateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjectApi.Models.User", b =>
                {
                    b.HasOne("ProjectApi.Models.Commodity", "commodity")
                        .WithMany()
                        .HasForeignKey("CommodityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectApi.Models.AccessLevel", "accessLevel")
                        .WithMany()
                        .HasForeignKey("accessLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectApi.Models.State", "state")
                        .WithMany()
                        .HasForeignKey("stateId");
                });

            modelBuilder.Entity("ProjectApi.Models.UserRole", b =>
                {
                    b.HasOne("ProjectApi.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectApi.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
